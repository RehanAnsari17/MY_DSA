def merge_overlapping_intervals1(arr,n):
    #OPTIMAL SOLN
    arr = sorted(arr)
    ans = [arr[0]]
    for i in range(1,n):
        # Check if current overlaps with last in ans
        if arr[i][0] <= ans[-1][1]:
            ans[-1] = (ans[-1][0], max(ans[-1][1], arr[i][1]))
        else:
            ans.append(arr[i])       
    return ans
def merge_overlapping_intervals(arr,n):
    #BETTER SOLN
    ans = []
    arr = sorted(arr)
    i=0
    while i < n:
        start = arr[i][0]
        end = arr[i][1]

        for j in range(i+1,n):
            if(arr[j][0] <= end):
                end = max(end,arr[j][1])
                i=j
            else:
                break
        ans.append((start,end))
        i+=1
    return ans
    
def merge_overlapping_intervals3(arr,n):
    #BETTER SOLN
    ans = []
    arr = sorted(arr)
    print(arr)
    for i in range(n):
        start = arr[i][0]
        end = arr[i][1]
        if len(ans)!=0 and end<=ans[-1][1]:
            continue
        for j in range(i+1,n):
            if(arr[j][0] <= end):
                end = max(end,arr[j][1])
            else:
                break
        ans.append((start,end))
    return ans 
    
arr = [(1,3),(16,17),(2,4),(15,18),(8,9),(2,6),(9,11)]
n = len(arr)

print(merge_overlapping_intervals3(arr,n))