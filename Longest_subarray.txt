def longest_subarray3(arr,k):
    #OPTIMAL SOLN
    n = len(arr)
    l = 0
    s = arr[0]
    left= 0
    right = 0 
    while(right<n):
        while(left <= right and s > k):
            s = s - arr[left]
            left = left + 1
        if (s == k):
            l = max(l,right-left+1)
        right += 1
        if (right < n):
            s += arr[right]
    return l    
def longest_subarray2(arr,k):
    #BETTER SOLUTION
    n = len(arr)
    l = 0
    s = 0
    freq = {}
    for i in range(n):
        print("Before :", freq)
        s += arr[i]
        print("SUM : ",s)
        if (s == k):
            l = max(l,i+1)
            print("Length: ",l)
        rem = s - k
        print(rem)
        if rem in freq:
            length = i-freq[rem]
            l = max(l,length)
            print("Length: ",l)
            
        if s not in freq:
            freq[s] = i
            print("After :",  freq)
    return l    
def longest_subarray(arr,k):
    #BRUTE SOLN 
    n = len(arr)
    l = 0
    for i in range(1,n):
        s = 0
        for j in range(i,n):
            s+= arr[j]
            if (s == k):
                l = max(l,j-i+1)
    return l
    
arr = [1,2,3,1,1,1,3,3]    
print(longest_subarray3(arr,3))