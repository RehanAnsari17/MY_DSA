#Use Merge Sort to solve this as aan optimal approach 


def ms(arr,low,high):
    count = 0
    if(low >= high):
        return count
    mid = (low+high)//2
    count += ms(arr,low,mid)
    count += ms(arr,mid+1,high)
    count += merge(arr,low,mid,high)
    
    return count
    #return arr
    
def merge(arr,low,mid,high):
    # global count
    count = 0
    temp = []
    left = low
    right = mid+1
    while(left<= mid and right <= high):
        if(arr[left] <= arr[right]):
            temp.append(arr[left])
            left+=1
        else:
            temp.append(arr[right])
            count += (mid-left)+1
            right+=1
    while(left <= mid):
        temp.append(arr[left])
        left+=1
    while (right<= high):
        temp.append(arr[right])
        right+=1
    for i in range(low,high+1):
        arr[i] = temp[i-low]
    
    return count    
    #return arr    
    
def merge_sort(arr,low,high):
    # global count
    # count = 0
    #ms(arr,low,high)
    count = ms(arr,low,high)
    return count

arr = [5,3,2,4,1]
n=len(arr)
x = merge_sort(arr,0,n-1)
print(x)


#BRUTE FORCE

def ci(arr,n):
    c = 0
    for i in range(n):
        for j in range(i+1,n):
            if arr[i]>arr[j]:
                c+=1
    return c            
    
arr = [5,3,2,4,1]
n=len(arr)
x = ci(arr,n)
print(x)