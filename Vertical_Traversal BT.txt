class Node:
    def __init__(self, data):
        self.data = data
        self.left = None
        self.right = None

def verticalTraversal(root):
    if not root:
        return []
        
    col_map = {}
    q = [(root, 0, 0)]  # (node, vertical, level)
    
    while q:
        new_q = []
        for node, vertical, level in q:
            if vertical not in col_map:
                col_map[vertical] = {}
            if level not in col_map[vertical]:
                col_map[vertical][level] = []
            
            col_map[vertical][level].append(node.data)
            col_map[vertical][level].sort()
            
            if node.left:
                new_q.append((node.left, vertical - 1, level + 1))
            if node.right:
                new_q.append((node.right, vertical + 1, level + 1))
        q = new_q  # ðŸ”‘ update BFS queue
    
    result = []
    for vertical in sorted(col_map.keys()):
        col_list = []
        for level in sorted(col_map[vertical].keys()):
            col_list.extend(col_map[vertical][level])
        result.append(col_list)
    
    return result


# ----------------- USAGE -----------------
root = Node(1)
root.left = Node(2)
root.right = Node(3)
root.left.right = Node(10)
root.left.left = Node(4)
root.right.left = Node(9)
root.right.right = Node(10)
root.left.left.right = Node(5)
root.left.left.right.right = Node(6)




# root = Node(1)
# root.left = Node(2)
# root.right = Node(7)
# root.left.left = Node(3)
# root.left.left.right = Node(4)
# root.left.left.right.left = Node(5)
# root.left.left.right.right = Node(6)
# root.right.right = Node(8)
# root.right.right.left = Node(9)
# root.right.right.left.left = Node(10)
# root.right.right.left.right = Node(11)

print(verticalTraversal(root))
