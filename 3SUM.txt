def threesum1(arr,n):
#OPTIMAL SOLN
    arr.sort()
    ans =[]
    for i in range(n):
        if i>0 and arr[i]==arr[i-1]:
            continue
        j=i+1
        k=n-1
        while(j<k):
            target = arr[i]+arr[j]+arr[k]
            if(target<0):
                j+=1
            elif(target>0):
                k-=1
            else:
                ans.append([arr[i],arr[j],arr[k]])
                j+=1
                k-=1
                while (j<k and arr[j]==arr[j-1]):
                    j+=1
                while (j<k and arr[k]==arr[k+1]):
                    k-=1
    return ans                




def threesum(arr,n):
#BETTER SOLN
    ans = []
    # x = []
    for i in range(n-1):
        freq = []
        for j in range(i+1,n):
            k = -(arr[i]+arr[j])
            if k in freq:
                x = sorted([arr[i],arr[j],k])
                # x = sorted(x)
                if x not in ans :
                    ans.append(x)
            else:
                freq.append(arr[j])
                
    return ans
    
arr  = [-2,-2,-2,-1,-1,-1,0,0,0,2,2,2,2]
n = len(arr)
print(threesum1(arr,n))