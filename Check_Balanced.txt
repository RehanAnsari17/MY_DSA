class Node:
    def __init__(self, data):
        self.data = data
        self.left = None
        self.right = None

# 1st Method - O(n^2)
def height(root):
    if root is None:
        return 0
    return 1 + max(height(root.left), height(root.right))

def check_balanced(root):
    if root is None:
        return True
    
    lh = height(root.left)
    rh = height(root.right)
    
    if abs(lh - rh) > 1:
        return False
    
    # check recursively if left and right subtrees are balanced
    if not check_balanced(root.left) or not check_balanced(root.right):
        return False
    
    return True
 

# 2nd Method - Optimal - O(n)   
def check(root):  # This check function is same as max_depth, just modify  it to return -1 if anywhere height condition is obstructed, signifying that tree is not balanced.
    if root == None:
        return 0  # you have to return 0
    lh = check(root.left)
    if (lh == -1):
        return -1
    rh = check(root.right)
    if (rh == -1):
        return -1
    
    if (abs(rh - lh) > 1):
        return -1
    return 1 + max(lh,rh)  

def check_balanced(root):
    return check(root) != -1


root = Node(1)
root.left = Node(2)
root.right = Node(5)
root.left.left = Node(3)
root.left.right = Node(4)
root.right.left = Node(6)
root.right.right = Node(7)
root.right.right.right = Node(8)
# root.right.right.right.right = Node(9) #False
# root.right.right.right.right.right = Node(10) #False



# ----------------- USAGE -----------------
print(check_balanced(root))

