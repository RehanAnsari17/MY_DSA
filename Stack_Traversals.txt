class Node:
    def __init__(self, data):
        self.data = data
        self.left = None
        self.right = None


def preorder_iterative(root):
    if not root:
        return []

    result = []
    stack = [root]   # Start with root in stack

    while stack:
        node = stack.pop()         # Take top of stack
        print("Node = ",node.data)
        result.append(node.data)   # Visit root (print/store)

        # Push right first so left is processed first
        # [root -> left -> right]
        if node.right:
            stack.append(node.right)
        if node.left:
            stack.append(node.left)

    return result
    
    
def postorder_iterative(root):
    if not root:
        return []

    result = []
    stack = [root]   # Start with root in stack

    while stack:
        node = stack.pop()
        result.append(node.data)

        if node.left:
            stack.append(node.left)
        if node.right:
            stack.append(node.right)

    return result[::-1]
    
def inorder_iterative(root):
    if not root:
        return []

    result = []
    stack = []
    current = root

    while stack or current:
        # Go left as far as possible
        while current:
            stack.append(current)
            current = current.left

        # Pop from stack (visit node)
        current = stack.pop()
        result.append(current.data)

        # Move to right child
        current = current.right

    return result    

def post(root):  #Approach from Striver
    res = []
    stack=[]
    curr = root
    while(curr or stack):
        if curr:
            stack.append(curr)
            curr = curr.left
        else:
            temp = stack[-1].right
            if temp == None:
                temp = stack.pop()
                res.append(temp.data)
                while (stack and temp == stack[-1].right):
                    temp = stack.pop()
                    res.append(temp.data)
            else:
                curr = temp
    return res            

root = Node(1)
root.left = Node(2)
root.right = Node(3)
root.left.left = Node(4)
root.left.right = Node(5)
root.left.right.left = Node(6)
root.left.right.right = Node(7)

# ----------------- USAGE -----------------
# print("Preorder Traversal (Iterative):")
# print(preorder_iterative(root))  
# # Output: [1, 2, 4, 5, 3, 6]

print("Postorder Traversal (Iterative) 1:")
print(postorder_iterative(root))

# print("Inorder Traversal (Iterative):")
# print(inorder_iterative(root))

print("Postorder Traversal (Iterative):")
print(post(root))
