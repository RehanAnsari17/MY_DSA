class Node:
    def __init__(self, data):
        self.data = data
        self.left = None
        self.right = None

# 1st Approach -Brute- O(n^2)
maxi = 0
def height(root):
    if root == None:
        return 0
    return 1 + max(height(root.left), height(root.right))  

def diameter(root):
    global maxi
    if root == None:
        return 0
    lh = height(root.left)
    rh = height(root.right)
    maxi = max(maxi,(lh+rh))
    diameter(root.left)
    diameter(root.right)
    return maxi
    
    
# Optimal Soln - O(n)    
def diameter_helper(root):
    if root is None:
        return 0, 0   # (height, diameter)

    lh, ld = diameter_helper(root.left)
    rh, rd = diameter_helper(root.right)

    height = 1 + max(lh, rh)
    diameter = max(ld, rd, lh + rh)  # max of left dia, right dia, or passing through root

    return height, diameter


def diameter_opti(root):
    return diameter_helper(root)[1]
    
    
root = Node(1)
root.left = Node(2)
root.right = Node(5)
root.left.left = Node(3)
root.left.right = Node(4)
root.right.left = Node(6)
root.right.right = Node(7)
root.right.right.right = Node(8)
root.right.right.right.right = Node(9) #False
root.right.right.right.right.right = Node(10) #False



# ----------------- USAGE -----------------
print(diameter_opti(root))

