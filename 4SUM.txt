def FourSum(arr,n,target):
#OPTIMAL SOLN
    arr.sort()
    ans =[]
    for i in range(n):
        if i>0 and arr[i]==arr[i-1]:
            continue
        for j in range(i+1,n):
            if j!=i+1 and arr[j]==arr[j-1]:
                continue
            k=j+1
            l=n-1
            while(k<l):
                s = arr[i]+arr[j]+arr[k]+arr[l]
                if(s<target):
                    k+=1
                elif(s>target):
                    l-=1
                else:
                    ans.append([arr[i],arr[j],arr[k],arr[l]])
                    k+=1
                    l-=1
                    while (k<l and arr[k]==arr[k-1]):
                        k+=1
                    while (k<l and arr[l]==arr[l+1]):
                        l-=1
    return ans                




def FourSum1(arr,n,target):
#BETTER SOLN
    ans = []
    # x = []
    for i in range(n):
        for j in range(i+1,n):
            freq = []
            for k in range(j+1,n):
                l = target-(arr[i]+arr[j]+arr[k])
                if l in freq:
                    x = sorted([arr[i],arr[j],arr[k],l])
                    # x = sorted(x)
                    if x not in ans :
                        ans.append(x)
                else:
                    freq.append(arr[k])
                
    return ans
    
def FourSum2(arr,n,target):
#BRUTE SOLN
    ans = []
    for i in range(n):
        for j in range(i+1,n):
            for k in range(j+1,n): 
                for l in range(k+1,n):
                    if (arr[i]+arr[j]+arr[k]+arr[l]==target):
                        x = sorted([arr[i],arr[j],arr[k],arr[l]])
                        if x not in ans:
                            ans.append(x)
                        
                        
    return  ans                   
    
arr  = [0,0,0,1,1,1,2,2,2,2,3,3,5,5,5]
n = len(arr)
target = 8
print(FourSum2(arr,n,target))