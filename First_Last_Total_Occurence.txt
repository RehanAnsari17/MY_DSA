def bs_lower_bound(arr,n,target):   #YOU CAN USE THIS FOR SEARCH INSERT POSITION QUESTION
    low = 0
    high = n-1
    ans = n
    while(low <= high):
        mid = (low + high)//2  # mid = low + (high - low)//2 ->to avid overflow case
        if (arr[mid] >= target):
            ans = mid
            high =mid-1
        else:
            low =mid + 1
    return ans


def bs_upper_bound(arr,n,target):
    low = 0
    high = n-1
    ans = n
    while(low <= high):
        mid = (low + high)//2  # mid = low + (high - low)//2 ->to avid overflow case
        if (arr[mid] > target):
            ans = mid
            high =mid-1
        else:
            low =mid + 1
    return ans    
    
def first_last_occurence(arr,target):
    first = -1
    last = -1
    n = len(arr)
    x = bs_lower_bound(arr,n,target)
    y = bs_upper_bound(arr,n,target)
    
    if (x == n or arr[x] != target):
        return (-1,-1)
    else:
        return (x,y-1)
   
   
    
def bs_first(arr,target):
    #DOING SEPERATE BINARY SEARCH FOR FIRST OCCURENCE
    n = len(arr)
    low = 0
    high = n-1
    first = -1

    while(low <= high):
        mid = (low+high)//2
        if (arr[mid] == target):
            first = mid
            high = mid-1
        elif (arr[mid] < target):
            low = mid+1
        else:
            high = mid-1
    return first        
    
def bs_last(arr,target):
    #DOING SEPERATE BINARY SEARCH FOR LAST OCCURENCE
    n = len(arr)
    low = 0
    high = n-1
    last = -1

    while(low <= high):
        mid = (low+high)//2
        if (arr[mid] == target):
            last = mid
            low = mid + 1
        elif (arr[mid] < target):
            low = mid+1
        else:
            high = mid-1
    return last

def total_occurence(arr,target):
    # TO COUNT ALL OCCURENCES OF A NUMBER
    n = len(arr)
    first = bs_first(arr,target)
    last = bs_last(arr,target)
    if (first == -1):
        return 0
    else:
        return (last-first)+1
    
    
arr = [2,3,4,6,8,8,8,11,13]
target = 11
print(total_occurence(arr,target))

# (bs_first(arr,target))
# if (bs_first(arr,target) == -1):
#     print("-1,-1")
# else:
#     print(bs_first(arr,target))
#     print(bs_last(arr,target))
    
    
    
