from collections import deque

class Node:
    def __init__(self, data):
        self.data = data
        self.left = None
        self.right = None


def level_order(root):
    if not root:
        return []

    result = []          # Final list of lists
    queue = deque([root])  # Use deque for efficient pop(0)
    
    while queue:
        level_size = len(queue)  # Number of nodes in this level
        level = []               # Store current level nodes

        for _ in range(level_size):
            node = queue.popleft()   # Pop from queue
            level.append(node.data)  # Add to current level list

            # Add children if they exist
            if node.left:
                queue.append(node.left)
            if node.right:
                queue.append(node.right)

        result.append(level)  # Add this level to result

    return result


# ----------------- USAGE -----------------
root = Node(1)
root.left = Node(2)
root.right = Node(3)
root.left.left = Node(4)
root.left.right = Node(5)
root.right.left = Node(6)
root.right.right = Node(7)

print("Level Order as List of Lists:")
print(level_order(root))  
# Output: [[1], [2, 3], [4, 5, 6]]
