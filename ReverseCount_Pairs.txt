#YOU HAVE TO COUNT HOW MANY PAIRS (I,J) SUCH THAT ARR[I] > 2*ARR[J] EXISTS

#USING MERGE SORT THE OPTIMAL SOLN IS BELOW:

def reverse_pairs(arr,low,mid,high):
    right = mid+1;
    count = 0 
    for i in range(low , mid+1):
        while(right<=high and arr[i] > 2*arr[right]):
            right +=1
        count += (right - (mid+1))
    return count

def ms(arr,low,high):
    count = 0
    if(low >= high):
        return count
    mid = (low+high)//2
    count += ms(arr,low,mid)
    count += ms(arr,mid+1,high)
    count += reverse_pairs(arr,low,mid,high)
    merge(arr,low,mid,high)
    return count
    #return arr
    
def merge(arr,low,mid,high):
    temp = []
    left = low
    right = mid+1
    while(left<= mid and right <= high):
        if(arr[left] <= arr[right]):
            temp.append(arr[left])
            left+=1
        else:
            temp.append(arr[right])
            right+=1
    while(left <= mid):
        temp.append(arr[left])
        left+=1
    while (right<= high):
        temp.append(arr[right])
        right+=1
    for i in range(low,high+1):
        arr[i] = temp[i-low]
        
    #return arr    
    
# def merge_sort(arr):
#     count = ms(arr,0,len(arr)-1)
#     return count
arr = [40,25,19,12,9,6,2]
count = ms(arr,0,len(arr)-1)
print(arr)
print(count)




#BRUTE FORCE

def RCP(arr,n):
    c = 0
    for i in range(n):
        for j in range(i+1,n):
            if arr[i]> 2*arr[j]:
                c+=1
    return c            
    
arr = [40,25,19,12,9,6,2]
n=len(arr)
x = rcp(arr,n)
print(x)